
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000039  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000020a  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a6  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dd  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000145  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00000fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000048  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, CS output ,all others input */
	DDRB = (1<<DDB5)|(1<<DDB7);//|(1<<DDB4);
  6c:	80 ea       	ldi	r24, 0xA0	; 160
  6e:	87 bb       	out	0x17, r24	; 23
	//PORTB |= (1<<DDB4);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  70:	81 e5       	ldi	r24, 0x51	; 81
  72:	8d b9       	out	0x0d, r24	; 13
//	SPDR = 0X03;
}
  74:	08 95       	ret

00000076 <SPI_RX>:
Stat SPI_RX(u8 * SendData, volatile u8 * RecData)
	{
		Stat retval;

	if((SPSR & (1<<SPIF)))
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	04 c0       	rjmp	.+8      	; 0x82 <SPI_RX+0xc>
	{
	PORTD = SPDR;
  7a:	8f b1       	in	r24, 0x0f	; 15
  7c:	82 bb       	out	0x12, r24	; 18
	/* Start transmission */
	SPDR = 3;
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	8f b9       	out	0x0f, r24	; 15
	}else
	{
		retval = BUSSY;
	}
			return retval;
	}
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	08 95       	ret

00000086 <main>:
	NullPoint
}Stat;
void SPI_MasterInit(void);
Stat SPI_RX(u8 * SendData, volatile u8 * RecData);
int main()
{
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	0f 92       	push	r0
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  98:	12 ba       	out	0x12, r1	; 18
	 u8 y, x=120;
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	89 83       	std	Y+1, r24	; 0x01
	SPI_MasterInit();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_MasterInit>
	
	while(1)
	{
		_delay_ms(1000);
		SPI_RX(&x,&x); // send 120 to slave
  a2:	8e 01       	movw	r16, r28
  a4:	0f 5f       	subi	r16, 0xFF	; 255
  a6:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9d e0       	ldi	r25, 0x0D	; 13
  ac:	a3 e0       	ldi	r26, 0x03	; 3
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x28>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x32>
  b8:	00 00       	nop
  ba:	c8 01       	movw	r24, r16
  bc:	b8 01       	movw	r22, r16
  be:	0e 94 3b 00 	call	0x76	; 0x76 <SPI_RX>
  c2:	f2 cf       	rjmp	.-28     	; 0xa8 <main+0x22>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
