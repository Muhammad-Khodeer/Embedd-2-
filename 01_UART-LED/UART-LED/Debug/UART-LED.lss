
UART-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e3  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015c  00000000  00000000  00000379  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ae  00000000  00000000  000004d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a2  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000004f  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000008dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
///////////// Local Declaration //////////////
uint8 receivedByte;

//////////// init seq ////////////

USART_Init(207);
  6c:	8f ec       	ldi	r24, 0xCF	; 207
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Init>
LED_init;
  74:	81 b3       	in	r24, 0x11	; 17
  76:	8c 60       	ori	r24, 0x0C	; 12
  78:	81 bb       	out	0x11, r24	; 17
//////////  app seq /////////////
while(1)
{
	receivedByte = USART_Receive();
  7a:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Receive>
	switch(receivedByte)
  7e:	81 36       	cpi	r24, 0x61	; 97
  80:	19 f0       	breq	.+6      	; 0x88 <main+0x1c>
  82:	82 36       	cpi	r24, 0x62	; 98
  84:	29 f0       	breq	.+10     	; 0x90 <main+0x24>
  86:	08 c0       	rjmp	.+16     	; 0x98 <main+0x2c>
	{
		case 'a':
			LED_ON;
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	82 bb       	out	0x12, r24	; 18
			break;
  8e:	f5 cf       	rjmp	.-22     	; 0x7a <main+0xe>
		case 'b':
			LED_OFF;
  90:	82 b3       	in	r24, 0x12	; 18
  92:	83 7f       	andi	r24, 0xF3	; 243
  94:	82 bb       	out	0x12, r24	; 18
			break;
  96:	f1 cf       	rjmp	.-30     	; 0x7a <main+0xe>
		default:
			USART_Transmit('E');
  98:	85 e4       	ldi	r24, 0x45	; 69
  9a:	0e 94 57 00 	call	0xae	; 0xae <USART_Transmit>
  9e:	ed cf       	rjmp	.-38     	; 0x7a <main+0xe>

000000a0 <USART_Init>:

void USART_Init( unsigned int baud )
{

/* Set baud rate */
UBRRH = (unsigned char)(baud>>8);
  a0:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)baud;
  a2:	89 b9       	out	0x09, r24	; 9
/* Enable receiver and transmitter */
UCSRB = (1<<RXEN)|(1<<TXEN);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(3<<UCSZ0);
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	80 bd       	out	0x20, r24	; 32
  ac:	08 95       	ret

000000ae <USART_Transmit>:
////////////////////////////////////////////////////

void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) );
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
/* Put data into buffer, sends the data */
UDR = data;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	08 95       	ret

000000b6 <USART_Receive>:
}
//////////////////////////////////////////////////////
unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) );
  b6:	5f 9b       	sbis	0x0b, 7	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_Receive>
/* Get and return received data from buffer */
return UDR;
  ba:	8c b1       	in	r24, 0x0c	; 12

}
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
